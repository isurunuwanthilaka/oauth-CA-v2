CREATE TABLE auth_user_status(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    status_name VARCHAR2(20) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE auth_role(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    role_name VARCHAR2(20) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE auth_permission(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    permission_name VARCHAR2(20) NOT NULL,
    PRIMARY KEY(id)
);

CREATE TABLE auth_permission_role(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    role_id NUMBER NOT NULL,
    permission_id NUMBER NOT NULL,
    FOREIGN KEY(role_id) REFERENCES auth_role(id) ON DELETE CASCADE,
    FOREIGN KEY(permission_id) REFERENCES auth_permission(id) ON DELETE CASCADE,
    PRIMARY KEY(id)
);

CREATE TABLE auth_user(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_status_id NUMBER NOT NULL,
    username VARCHAR(100) NOT NULL,
    email VARCHAR(100) NOT NULL,
    external_id NUMBER NOT NULL,
    name VARCHAR(200) NOT NULL,
    FOREIGN KEY(user_status_id) REFERENCES auth_user_status(id) ON DELETE CASCADE,
    PRIMARY KEY(id),
    CONSTRAINT user_unique UNIQUE (username)
);

CREATE TABLE auth_token(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    user_id NUMBER NOT NULL,
    token VARCHAR(1000) NOT NULL,
    invalidated INTEGER NOT NULL constraint invalidated_const check (invalidated in (0, 1)),
    expired_at TIMESTAMP,
    login_at TIMESTAMP NOT NULL,
    logout_at TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES auth_user(id) ON DELETE CASCADE,
    PRIMARY KEY(id)
);

CREATE TABLE auth_user_role(
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    role_id NUMBER NOT NULL,
    user_id NUMBER NOT NULL,
    FOREIGN KEY(role_id) REFERENCES auth_role(id) ON DELETE CASCADE,
    FOREIGN KEY(user_id) REFERENCES auth_user(id) ON DELETE CASCADE,
    PRIMARY KEY(id)
);

CREATE TABLE auth_audit_log (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    resource_name VARCHAR(100) NOT NULL,
    resource_id NUMBER NOT NULL,
    operation VARCHAR(100) NOT NULL ,
    field VARCHAR(100) ,
    previous_new_val VARCHAR(255) ,
    operated_at TIMESTAMP NOT NULL ,
    operated_by NUMBER NOT NULL ,
    PRIMARY KEY(id)
);